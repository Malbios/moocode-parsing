// Generated from c://dev//moocode-utils//moocode-parsing//src//grammar//MoocodeLexer.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class MoocodeLexer extends Lexer {
	public static readonly WHITESPACES = 1;
	public static readonly BREAK = 2;
	public static readonly CONTINUE = 3;
	public static readonly ELSE = 4;
	public static readonly ELSEIF = 5;
	public static readonly ENDFOR = 6;
	public static readonly ENDFORK = 7;
	public static readonly ENDIF = 8;
	public static readonly ENDTRY = 9;
	public static readonly ENDWHILE = 10;
	public static readonly EXCEPT = 11;
	public static readonly FALSE = 12;
	public static readonly FINALLY = 13;
	public static readonly FOR = 14;
	public static readonly FORK = 15;
	public static readonly IF = 16;
	public static readonly IN = 17;
	public static readonly RETURN = 18;
	public static readonly TRUE = 19;
	public static readonly TRY = 20;
	public static readonly WHILE = 21;
	public static readonly E_NONE = 22;
	public static readonly E_TYPE = 23;
	public static readonly E_DIV = 24;
	public static readonly E_PERM = 25;
	public static readonly E_PROPNF = 26;
	public static readonly E_VERBNF = 27;
	public static readonly E_VARNF = 28;
	public static readonly E_INVIND = 29;
	public static readonly E_RECMOVE = 30;
	public static readonly E_MAXREC = 31;
	public static readonly E_RANGE = 32;
	public static readonly E_ARGS = 33;
	public static readonly E_NACC = 34;
	public static readonly E_INVARG = 35;
	public static readonly E_QUOTA = 36;
	public static readonly E_FLOAT = 37;
	public static readonly E_FILE = 38;
	public static readonly E_EXEC = 39;
	public static readonly E_INTRPT = 40;
	public static readonly ANY_ERROR = 41;
	public static readonly IDENTIFIER = 42;
	public static readonly INTEGER_LITERAL = 43;
	public static readonly FLOAT_LITERAL = 44;
	public static readonly STRING_LITERAL = 45;
	public static readonly ARROW = 46;
	public static readonly AT = 47;
	public static readonly BIT_AND = 48;
	public static readonly BIT_OR = 49;
	public static readonly BIT_XOR = 50;
	public static readonly CARET = 51;
	public static readonly CLOSE_BRACE = 52;
	public static readonly CLOSE_BRACKET = 53;
	public static readonly CLOSE_PARENS = 54;
	public static readonly COLON = 55;
	public static readonly COMMA = 56;
	public static readonly DIV = 57;
	public static readonly DOLLAR = 58;
	public static readonly DOT = 59;
	public static readonly EQUALS = 60;
	public static readonly LOG_SHIFT_RIGHT = 61;
	public static readonly LOG_SHIFT_LEFT = 62;
	public static readonly MINUS = 63;
	public static readonly OP_AND = 64;
	public static readonly OP_EQ = 65;
	public static readonly OP_GE = 66;
	public static readonly OP_GT = 67;
	public static readonly OP_LE = 68;
	public static readonly OP_LT = 69;
	public static readonly OP_NE = 70;
	public static readonly OP_NOT = 71;
	public static readonly OP_OR = 72;
	public static readonly OP_RANGE = 73;
	public static readonly OPEN_BRACE = 74;
	public static readonly OPEN_BRACKET = 75;
	public static readonly OPEN_PARENS = 76;
	public static readonly PERCENT = 77;
	public static readonly PIPE = 78;
	public static readonly PLUS = 79;
	public static readonly QUESTION_MARK = 80;
	public static readonly SEMICOLON = 81;
	public static readonly SHARP = 82;
	public static readonly SINGLE_QUOTE = 83;
	public static readonly STAR = 84;
	public static readonly THIN_ARROW = 85;
	public static readonly TICK = 86;
	public static readonly WAVE = 87;
	public static readonly ANY = 88;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            "'break'", "'continue'", 
                                                            "'else'", "'elseif'", 
                                                            "'endfor'", 
                                                            "'endfork'", 
                                                            "'endif'", "'endtry'", 
                                                            "'endwhile'", 
                                                            "'except'", 
                                                            "'false'", "'finally'", 
                                                            "'for'", "'fork'", 
                                                            "'if'", "'in'", 
                                                            "'return'", 
                                                            "'true'", "'try'", 
                                                            "'while'", "'E_NONE'", 
                                                            "'E_TYPE'", 
                                                            "'E_DIV'", "'E_PERM'", 
                                                            "'E_PROPNF'", 
                                                            "'E_VERBNF'", 
                                                            "'E_VARNF'", 
                                                            "'E_INVIND'", 
                                                            "'E_RECMOVE'", 
                                                            "'E_MAXREC'", 
                                                            "'E_RANGE'", 
                                                            "'E_ARGS'", 
                                                            "'E_NACC'", 
                                                            "'E_INVARG'", 
                                                            "'E_QUOTA'", 
                                                            "'E_FLOAT'", 
                                                            "'E_FILE'", 
                                                            "'E_EXEC'", 
                                                            "'E_INTRPT'", 
                                                            "'ANY'", null, 
                                                            null, null, 
                                                            null, "'=>'", 
                                                            "'@'", "'&.'", 
                                                            "'|.'", "'^.'", 
                                                            "'^'", "'}'", 
                                                            "']'", "')'", 
                                                            "':'", "','", 
                                                            "'/'", "'$'", 
                                                            "'.'", "'='", 
                                                            "'>>'", "'<<'", 
                                                            "'-'", "'&&'", 
                                                            "'=='", "'>='", 
                                                            "'>'", "'<='", 
                                                            "'<'", "'!='", 
                                                            "'!'", "'||'", 
                                                            "'..'", "'{'", 
                                                            "'['", "'('", 
                                                            "'%'", "'|'", 
                                                            "'+'", "'?'", 
                                                            "';'", "'#'", 
                                                            "'''", "'*'", 
                                                            "'->'", "'`'", 
                                                            "'~'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "WHITESPACES", 
                                                             "BREAK", "CONTINUE", 
                                                             "ELSE", "ELSEIF", 
                                                             "ENDFOR", "ENDFORK", 
                                                             "ENDIF", "ENDTRY", 
                                                             "ENDWHILE", 
                                                             "EXCEPT", "FALSE", 
                                                             "FINALLY", 
                                                             "FOR", "FORK", 
                                                             "IF", "IN", 
                                                             "RETURN", "TRUE", 
                                                             "TRY", "WHILE", 
                                                             "E_NONE", "E_TYPE", 
                                                             "E_DIV", "E_PERM", 
                                                             "E_PROPNF", 
                                                             "E_VERBNF", 
                                                             "E_VARNF", 
                                                             "E_INVIND", 
                                                             "E_RECMOVE", 
                                                             "E_MAXREC", 
                                                             "E_RANGE", 
                                                             "E_ARGS", "E_NACC", 
                                                             "E_INVARG", 
                                                             "E_QUOTA", 
                                                             "E_FLOAT", 
                                                             "E_FILE", "E_EXEC", 
                                                             "E_INTRPT", 
                                                             "ANY_ERROR", 
                                                             "IDENTIFIER", 
                                                             "INTEGER_LITERAL", 
                                                             "FLOAT_LITERAL", 
                                                             "STRING_LITERAL", 
                                                             "ARROW", "AT", 
                                                             "BIT_AND", 
                                                             "BIT_OR", "BIT_XOR", 
                                                             "CARET", "CLOSE_BRACE", 
                                                             "CLOSE_BRACKET", 
                                                             "CLOSE_PARENS", 
                                                             "COLON", "COMMA", 
                                                             "DIV", "DOLLAR", 
                                                             "DOT", "EQUALS", 
                                                             "LOG_SHIFT_RIGHT", 
                                                             "LOG_SHIFT_LEFT", 
                                                             "MINUS", "OP_AND", 
                                                             "OP_EQ", "OP_GE", 
                                                             "OP_GT", "OP_LE", 
                                                             "OP_LT", "OP_NE", 
                                                             "OP_NOT", "OP_OR", 
                                                             "OP_RANGE", 
                                                             "OPEN_BRACE", 
                                                             "OPEN_BRACKET", 
                                                             "OPEN_PARENS", 
                                                             "PERCENT", 
                                                             "PIPE", "PLUS", 
                                                             "QUESTION_MARK", 
                                                             "SEMICOLON", 
                                                             "SHARP", "SINGLE_QUOTE", 
                                                             "STAR", "THIN_ARROW", 
                                                             "TICK", "WAVE", 
                                                             "ANY" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"WHITESPACES", "BREAK", "CONTINUE", "ELSE", "ELSEIF", "ENDFOR", "ENDFORK", 
		"ENDIF", "ENDTRY", "ENDWHILE", "EXCEPT", "FALSE", "FINALLY", "FOR", "FORK", 
		"IF", "IN", "RETURN", "TRUE", "TRY", "WHILE", "E_NONE", "E_TYPE", "E_DIV", 
		"E_PERM", "E_PROPNF", "E_VERBNF", "E_VARNF", "E_INVIND", "E_RECMOVE", 
		"E_MAXREC", "E_RANGE", "E_ARGS", "E_NACC", "E_INVARG", "E_QUOTA", "E_FLOAT", 
		"E_FILE", "E_EXEC", "E_INTRPT", "ANY_ERROR", "IDENTIFIER", "INTEGER_LITERAL", 
		"FLOAT_LITERAL", "STRING_LITERAL", "ARROW", "AT", "BIT_AND", "BIT_OR", 
		"BIT_XOR", "CARET", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PARENS", "COLON", 
		"COMMA", "DIV", "DOLLAR", "DOT", "EQUALS", "LOG_SHIFT_RIGHT", "LOG_SHIFT_LEFT", 
		"MINUS", "OP_AND", "OP_EQ", "OP_GE", "OP_GT", "OP_LE", "OP_LT", "OP_NE", 
		"OP_NOT", "OP_OR", "OP_RANGE", "OPEN_BRACE", "OPEN_BRACKET", "OPEN_PARENS", 
		"PERCENT", "PIPE", "PLUS", "QUESTION_MARK", "SEMICOLON", "SHARP", "SINGLE_QUOTE", 
		"STAR", "THIN_ARROW", "TICK", "WAVE", "ANY", "Whitespace", "NewLine", 
		"IdentifierOrKeyword", "IdentifierStartCharacter", "IdentifierPartCharacter", 
		"LetterCharacter", "Digit", "ExponentPart",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, MoocodeLexer._ATN, MoocodeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "MoocodeLexer.g4"; }

	public get literalNames(): (string | null)[] { return MoocodeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return MoocodeLexer.symbolicNames; }
	public get ruleNames(): string[] { return MoocodeLexer.ruleNames; }

	public get serializedATN(): number[] { return MoocodeLexer._serializedATN; }

	public get channelNames(): string[] { return MoocodeLexer.channelNames; }

	public get modeNames(): string[] { return MoocodeLexer.modeNames; }

	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 43:
			return this.FLOAT_LITERAL_sempred(localctx, predIndex);
		case 49:
			return this.BIT_XOR_sempred(localctx, predIndex);
		}
		return true;
	}
	private FLOAT_LITERAL_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this._input.LA(1) != '.'.charCodeAt(0);
		case 1:
			return this._input.LA(-1) != '.'.charCodeAt(0);
		case 2:
			return this._input.LA(-1) != '.'.charCodeAt(0);
		}
		return true;
	}
	private BIT_XOR_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this._input.LA(1) != '.'.charCodeAt(0);
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,88,708,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,
	1,0,4,0,196,8,0,11,0,12,0,197,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
	2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
	4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
	7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,
	14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
	1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
	20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
	1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
	1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
	28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
	1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
	31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
	1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
	35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
	1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,
	39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,42,
	3,42,482,8,42,1,42,1,42,5,42,486,8,42,10,42,12,42,489,9,42,1,43,3,43,492,
	8,43,1,43,1,43,5,43,496,8,43,10,43,12,43,499,9,43,1,43,1,43,1,43,1,43,5,
	43,505,8,43,10,43,12,43,508,9,43,1,43,3,43,511,8,43,3,43,513,8,43,1,43,
	3,43,516,8,43,1,43,1,43,5,43,520,8,43,10,43,12,43,523,9,43,3,43,525,8,43,
	1,43,1,43,1,43,1,43,5,43,531,8,43,10,43,12,43,534,9,43,1,43,3,43,537,8,
	43,1,43,3,43,540,8,43,1,43,1,43,5,43,544,8,43,10,43,12,43,547,9,43,3,43,
	549,8,43,1,43,1,43,3,43,553,8,43,1,43,3,43,556,8,43,1,44,1,44,1,44,1,44,
	5,44,562,8,44,10,44,12,44,565,9,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,
	47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,
	1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,
	59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,64,1,64,
	1,64,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,
	70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,
	1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,
	83,1,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,89,
	3,89,676,8,89,1,90,1,90,5,90,680,8,90,10,90,12,90,683,9,90,1,91,1,91,3,
	91,687,8,91,1,92,1,92,1,92,3,92,692,8,92,1,93,1,93,1,94,1,94,1,95,1,95,
	3,95,700,8,95,1,95,1,95,5,95,704,8,95,10,95,12,95,707,9,95,0,0,96,1,1,3,
	2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
	52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,
	125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,
	167,84,169,85,171,86,173,87,175,88,177,0,179,0,181,0,183,0,185,0,187,0,
	189,0,191,0,1,0,30,2,0,66,66,98,98,2,0,82,82,114,114,2,0,69,69,101,101,
	2,0,65,65,97,97,2,0,75,75,107,107,2,0,67,67,99,99,2,0,79,79,111,111,2,0,
	78,78,110,110,2,0,84,84,116,116,2,0,73,73,105,105,2,0,85,85,117,117,2,0,
	76,76,108,108,2,0,83,83,115,115,2,0,70,70,102,102,2,0,68,68,100,100,2,0,
	89,89,121,121,2,0,87,87,119,119,2,0,72,72,104,104,2,0,88,88,120,120,2,0,
	80,80,112,112,2,0,86,86,118,118,2,0,77,77,109,109,2,0,71,71,103,103,2,0,
	81,81,113,113,4,0,10,10,13,13,34,34,92,92,2,0,10,10,13,13,2,0,9,9,32,32,
	2,0,65,90,97,122,1,0,48,57,2,0,43,43,45,45,728,0,1,1,0,0,0,0,3,1,0,0,0,
	0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
	27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
	0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,
	71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
	0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
	93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
	0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
	0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,
	0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
	0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
	145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,
	1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,
	0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,
	0,0,1,195,1,0,0,0,3,201,1,0,0,0,5,207,1,0,0,0,7,216,1,0,0,0,9,221,1,0,0,
	0,11,228,1,0,0,0,13,235,1,0,0,0,15,243,1,0,0,0,17,249,1,0,0,0,19,256,1,
	0,0,0,21,265,1,0,0,0,23,272,1,0,0,0,25,278,1,0,0,0,27,286,1,0,0,0,29,290,
	1,0,0,0,31,295,1,0,0,0,33,298,1,0,0,0,35,301,1,0,0,0,37,308,1,0,0,0,39,
	313,1,0,0,0,41,317,1,0,0,0,43,323,1,0,0,0,45,330,1,0,0,0,47,337,1,0,0,0,
	49,343,1,0,0,0,51,350,1,0,0,0,53,359,1,0,0,0,55,368,1,0,0,0,57,376,1,0,
	0,0,59,385,1,0,0,0,61,395,1,0,0,0,63,404,1,0,0,0,65,412,1,0,0,0,67,419,
	1,0,0,0,69,426,1,0,0,0,71,435,1,0,0,0,73,443,1,0,0,0,75,451,1,0,0,0,77,
	458,1,0,0,0,79,465,1,0,0,0,81,474,1,0,0,0,83,478,1,0,0,0,85,481,1,0,0,0,
	87,555,1,0,0,0,89,557,1,0,0,0,91,568,1,0,0,0,93,571,1,0,0,0,95,573,1,0,
	0,0,97,576,1,0,0,0,99,579,1,0,0,0,101,584,1,0,0,0,103,586,1,0,0,0,105,588,
	1,0,0,0,107,590,1,0,0,0,109,592,1,0,0,0,111,594,1,0,0,0,113,596,1,0,0,0,
	115,598,1,0,0,0,117,600,1,0,0,0,119,602,1,0,0,0,121,604,1,0,0,0,123,607,
	1,0,0,0,125,610,1,0,0,0,127,612,1,0,0,0,129,615,1,0,0,0,131,618,1,0,0,0,
	133,621,1,0,0,0,135,623,1,0,0,0,137,626,1,0,0,0,139,628,1,0,0,0,141,631,
	1,0,0,0,143,633,1,0,0,0,145,636,1,0,0,0,147,639,1,0,0,0,149,641,1,0,0,0,
	151,643,1,0,0,0,153,645,1,0,0,0,155,647,1,0,0,0,157,649,1,0,0,0,159,651,
	1,0,0,0,161,653,1,0,0,0,163,655,1,0,0,0,165,657,1,0,0,0,167,659,1,0,0,0,
	169,661,1,0,0,0,171,664,1,0,0,0,173,666,1,0,0,0,175,668,1,0,0,0,177,670,
	1,0,0,0,179,675,1,0,0,0,181,677,1,0,0,0,183,686,1,0,0,0,185,691,1,0,0,0,
	187,693,1,0,0,0,189,695,1,0,0,0,191,697,1,0,0,0,193,196,3,177,88,0,194,
	196,3,179,89,0,195,193,1,0,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,
	1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,200,6,0,0,0,200,2,1,0,0,0,201,
	202,7,0,0,0,202,203,7,1,0,0,203,204,7,2,0,0,204,205,7,3,0,0,205,206,7,4,
	0,0,206,4,1,0,0,0,207,208,7,5,0,0,208,209,7,6,0,0,209,210,7,7,0,0,210,211,
	7,8,0,0,211,212,7,9,0,0,212,213,7,7,0,0,213,214,7,10,0,0,214,215,7,2,0,
	0,215,6,1,0,0,0,216,217,7,2,0,0,217,218,7,11,0,0,218,219,7,12,0,0,219,220,
	7,2,0,0,220,8,1,0,0,0,221,222,7,2,0,0,222,223,7,11,0,0,223,224,7,12,0,0,
	224,225,7,2,0,0,225,226,7,9,0,0,226,227,7,13,0,0,227,10,1,0,0,0,228,229,
	7,2,0,0,229,230,7,7,0,0,230,231,7,14,0,0,231,232,7,13,0,0,232,233,7,6,0,
	0,233,234,7,1,0,0,234,12,1,0,0,0,235,236,7,2,0,0,236,237,7,7,0,0,237,238,
	7,14,0,0,238,239,7,13,0,0,239,240,7,6,0,0,240,241,7,1,0,0,241,242,7,4,0,
	0,242,14,1,0,0,0,243,244,7,2,0,0,244,245,7,7,0,0,245,246,7,14,0,0,246,247,
	7,9,0,0,247,248,7,13,0,0,248,16,1,0,0,0,249,250,7,2,0,0,250,251,7,7,0,0,
	251,252,7,14,0,0,252,253,7,8,0,0,253,254,7,1,0,0,254,255,7,15,0,0,255,18,
	1,0,0,0,256,257,7,2,0,0,257,258,7,7,0,0,258,259,7,14,0,0,259,260,7,16,0,
	0,260,261,7,17,0,0,261,262,7,9,0,0,262,263,7,11,0,0,263,264,7,2,0,0,264,
	20,1,0,0,0,265,266,7,2,0,0,266,267,7,18,0,0,267,268,7,5,0,0,268,269,7,2,
	0,0,269,270,7,19,0,0,270,271,7,8,0,0,271,22,1,0,0,0,272,273,7,13,0,0,273,
	274,7,3,0,0,274,275,7,11,0,0,275,276,7,12,0,0,276,277,7,2,0,0,277,24,1,
	0,0,0,278,279,7,13,0,0,279,280,7,9,0,0,280,281,7,7,0,0,281,282,7,3,0,0,
	282,283,7,11,0,0,283,284,7,11,0,0,284,285,7,15,0,0,285,26,1,0,0,0,286,287,
	7,13,0,0,287,288,7,6,0,0,288,289,7,1,0,0,289,28,1,0,0,0,290,291,7,13,0,
	0,291,292,7,6,0,0,292,293,7,1,0,0,293,294,7,4,0,0,294,30,1,0,0,0,295,296,
	7,9,0,0,296,297,7,13,0,0,297,32,1,0,0,0,298,299,7,9,0,0,299,300,7,7,0,0,
	300,34,1,0,0,0,301,302,7,1,0,0,302,303,7,2,0,0,303,304,7,8,0,0,304,305,
	7,10,0,0,305,306,7,1,0,0,306,307,7,7,0,0,307,36,1,0,0,0,308,309,7,8,0,0,
	309,310,7,1,0,0,310,311,7,10,0,0,311,312,7,2,0,0,312,38,1,0,0,0,313,314,
	7,8,0,0,314,315,7,1,0,0,315,316,7,15,0,0,316,40,1,0,0,0,317,318,7,16,0,
	0,318,319,7,17,0,0,319,320,7,9,0,0,320,321,7,11,0,0,321,322,7,2,0,0,322,
	42,1,0,0,0,323,324,7,2,0,0,324,325,5,95,0,0,325,326,7,7,0,0,326,327,7,6,
	0,0,327,328,7,7,0,0,328,329,7,2,0,0,329,44,1,0,0,0,330,331,7,2,0,0,331,
	332,5,95,0,0,332,333,7,8,0,0,333,334,7,15,0,0,334,335,7,19,0,0,335,336,
	7,2,0,0,336,46,1,0,0,0,337,338,7,2,0,0,338,339,5,95,0,0,339,340,7,14,0,
	0,340,341,7,9,0,0,341,342,7,20,0,0,342,48,1,0,0,0,343,344,7,2,0,0,344,345,
	5,95,0,0,345,346,7,19,0,0,346,347,7,2,0,0,347,348,7,1,0,0,348,349,7,21,
	0,0,349,50,1,0,0,0,350,351,7,2,0,0,351,352,5,95,0,0,352,353,7,19,0,0,353,
	354,7,1,0,0,354,355,7,6,0,0,355,356,7,19,0,0,356,357,7,7,0,0,357,358,7,
	13,0,0,358,52,1,0,0,0,359,360,7,2,0,0,360,361,5,95,0,0,361,362,7,20,0,0,
	362,363,7,2,0,0,363,364,7,1,0,0,364,365,7,0,0,0,365,366,7,7,0,0,366,367,
	7,13,0,0,367,54,1,0,0,0,368,369,7,2,0,0,369,370,5,95,0,0,370,371,7,20,0,
	0,371,372,7,3,0,0,372,373,7,1,0,0,373,374,7,7,0,0,374,375,7,13,0,0,375,
	56,1,0,0,0,376,377,7,2,0,0,377,378,5,95,0,0,378,379,7,9,0,0,379,380,7,7,
	0,0,380,381,7,20,0,0,381,382,7,9,0,0,382,383,7,7,0,0,383,384,7,14,0,0,384,
	58,1,0,0,0,385,386,7,2,0,0,386,387,5,95,0,0,387,388,7,1,0,0,388,389,7,2,
	0,0,389,390,7,5,0,0,390,391,7,21,0,0,391,392,7,6,0,0,392,393,7,20,0,0,393,
	394,7,2,0,0,394,60,1,0,0,0,395,396,7,2,0,0,396,397,5,95,0,0,397,398,7,21,
	0,0,398,399,7,3,0,0,399,400,7,18,0,0,400,401,7,1,0,0,401,402,7,2,0,0,402,
	403,7,5,0,0,403,62,1,0,0,0,404,405,7,2,0,0,405,406,5,95,0,0,406,407,7,1,
	0,0,407,408,7,3,0,0,408,409,7,7,0,0,409,410,7,22,0,0,410,411,7,2,0,0,411,
	64,1,0,0,0,412,413,7,2,0,0,413,414,5,95,0,0,414,415,7,3,0,0,415,416,7,1,
	0,0,416,417,7,22,0,0,417,418,7,12,0,0,418,66,1,0,0,0,419,420,7,2,0,0,420,
	421,5,95,0,0,421,422,7,7,0,0,422,423,7,3,0,0,423,424,7,5,0,0,424,425,7,
	5,0,0,425,68,1,0,0,0,426,427,7,2,0,0,427,428,5,95,0,0,428,429,7,9,0,0,429,
	430,7,7,0,0,430,431,7,20,0,0,431,432,7,3,0,0,432,433,7,1,0,0,433,434,7,
	22,0,0,434,70,1,0,0,0,435,436,7,2,0,0,436,437,5,95,0,0,437,438,7,23,0,0,
	438,439,7,10,0,0,439,440,7,6,0,0,440,441,7,8,0,0,441,442,7,3,0,0,442,72,
	1,0,0,0,443,444,7,2,0,0,444,445,5,95,0,0,445,446,7,13,0,0,446,447,7,11,
	0,0,447,448,7,6,0,0,448,449,7,3,0,0,449,450,7,8,0,0,450,74,1,0,0,0,451,
	452,7,2,0,0,452,453,5,95,0,0,453,454,7,13,0,0,454,455,7,9,0,0,455,456,7,
	11,0,0,456,457,7,2,0,0,457,76,1,0,0,0,458,459,7,2,0,0,459,460,5,95,0,0,
	460,461,7,2,0,0,461,462,7,18,0,0,462,463,7,2,0,0,463,464,7,5,0,0,464,78,
	1,0,0,0,465,466,7,2,0,0,466,467,5,95,0,0,467,468,7,9,0,0,468,469,7,7,0,
	0,469,470,7,8,0,0,470,471,7,1,0,0,471,472,7,19,0,0,472,473,7,8,0,0,473,
	80,1,0,0,0,474,475,7,3,0,0,475,476,7,7,0,0,476,477,7,15,0,0,477,82,1,0,
	0,0,478,479,3,181,90,0,479,84,1,0,0,0,480,482,3,125,62,0,481,480,1,0,0,
	0,481,482,1,0,0,0,482,483,1,0,0,0,483,487,3,189,94,0,484,486,3,189,94,0,
	485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,86,
	1,0,0,0,489,487,1,0,0,0,490,492,3,125,62,0,491,490,1,0,0,0,491,492,1,0,
	0,0,492,493,1,0,0,0,493,497,3,189,94,0,494,496,3,189,94,0,495,494,1,0,0,
	0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,0,499,497,
	1,0,0,0,500,501,5,46,0,0,501,512,4,43,0,0,502,506,3,189,94,0,503,505,3,
	189,94,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,
	0,507,510,1,0,0,0,508,506,1,0,0,0,509,511,3,191,95,0,510,509,1,0,0,0,510,
	511,1,0,0,0,511,513,1,0,0,0,512,502,1,0,0,0,512,513,1,0,0,0,513,556,1,0,
	0,0,514,516,3,125,62,0,515,514,1,0,0,0,515,516,1,0,0,0,516,524,1,0,0,0,
	517,521,3,189,94,0,518,520,3,189,94,0,519,518,1,0,0,0,520,523,1,0,0,0,521,
	519,1,0,0,0,521,522,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,524,517,1,0,
	0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,4,43,1,0,527,528,5,46,0,0,528,
	532,3,189,94,0,529,531,3,189,94,0,530,529,1,0,0,0,531,534,1,0,0,0,532,530,
	1,0,0,0,532,533,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,535,537,3,191,95,
	0,536,535,1,0,0,0,536,537,1,0,0,0,537,556,1,0,0,0,538,540,3,125,62,0,539,
	538,1,0,0,0,539,540,1,0,0,0,540,548,1,0,0,0,541,545,3,189,94,0,542,544,
	3,189,94,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,
	0,0,546,549,1,0,0,0,547,545,1,0,0,0,548,541,1,0,0,0,548,549,1,0,0,0,549,
	550,1,0,0,0,550,552,4,43,2,0,551,553,5,46,0,0,552,551,1,0,0,0,552,553,1,
	0,0,0,553,554,1,0,0,0,554,556,3,191,95,0,555,491,1,0,0,0,555,515,1,0,0,
	0,555,539,1,0,0,0,556,88,1,0,0,0,557,563,5,34,0,0,558,562,8,24,0,0,559,
	560,5,92,0,0,560,562,8,25,0,0,561,558,1,0,0,0,561,559,1,0,0,0,562,565,1,
	0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,1,0,0,0,566,
	567,5,34,0,0,567,90,1,0,0,0,568,569,5,61,0,0,569,570,5,62,0,0,570,92,1,
	0,0,0,571,572,5,64,0,0,572,94,1,0,0,0,573,574,5,38,0,0,574,575,5,46,0,0,
	575,96,1,0,0,0,576,577,5,124,0,0,577,578,5,46,0,0,578,98,1,0,0,0,579,580,
	5,94,0,0,580,581,5,46,0,0,581,582,1,0,0,0,582,583,4,49,3,0,583,100,1,0,
	0,0,584,585,5,94,0,0,585,102,1,0,0,0,586,587,5,125,0,0,587,104,1,0,0,0,
	588,589,5,93,0,0,589,106,1,0,0,0,590,591,5,41,0,0,591,108,1,0,0,0,592,593,
	5,58,0,0,593,110,1,0,0,0,594,595,5,44,0,0,595,112,1,0,0,0,596,597,5,47,
	0,0,597,114,1,0,0,0,598,599,5,36,0,0,599,116,1,0,0,0,600,601,5,46,0,0,601,
	118,1,0,0,0,602,603,5,61,0,0,603,120,1,0,0,0,604,605,5,62,0,0,605,606,5,
	62,0,0,606,122,1,0,0,0,607,608,5,60,0,0,608,609,5,60,0,0,609,124,1,0,0,
	0,610,611,5,45,0,0,611,126,1,0,0,0,612,613,5,38,0,0,613,614,5,38,0,0,614,
	128,1,0,0,0,615,616,5,61,0,0,616,617,5,61,0,0,617,130,1,0,0,0,618,619,5,
	62,0,0,619,620,5,61,0,0,620,132,1,0,0,0,621,622,5,62,0,0,622,134,1,0,0,
	0,623,624,5,60,0,0,624,625,5,61,0,0,625,136,1,0,0,0,626,627,5,60,0,0,627,
	138,1,0,0,0,628,629,5,33,0,0,629,630,5,61,0,0,630,140,1,0,0,0,631,632,5,
	33,0,0,632,142,1,0,0,0,633,634,5,124,0,0,634,635,5,124,0,0,635,144,1,0,
	0,0,636,637,5,46,0,0,637,638,5,46,0,0,638,146,1,0,0,0,639,640,5,123,0,0,
	640,148,1,0,0,0,641,642,5,91,0,0,642,150,1,0,0,0,643,644,5,40,0,0,644,152,
	1,0,0,0,645,646,5,37,0,0,646,154,1,0,0,0,647,648,5,124,0,0,648,156,1,0,
	0,0,649,650,5,43,0,0,650,158,1,0,0,0,651,652,5,63,0,0,652,160,1,0,0,0,653,
	654,5,59,0,0,654,162,1,0,0,0,655,656,5,35,0,0,656,164,1,0,0,0,657,658,5,
	39,0,0,658,166,1,0,0,0,659,660,5,42,0,0,660,168,1,0,0,0,661,662,5,45,0,
	0,662,663,5,62,0,0,663,170,1,0,0,0,664,665,5,96,0,0,665,172,1,0,0,0,666,
	667,5,126,0,0,667,174,1,0,0,0,668,669,9,0,0,0,669,176,1,0,0,0,670,671,7,
	26,0,0,671,178,1,0,0,0,672,673,5,13,0,0,673,676,5,10,0,0,674,676,7,25,0,
	0,675,672,1,0,0,0,675,674,1,0,0,0,676,180,1,0,0,0,677,681,3,183,91,0,678,
	680,3,185,92,0,679,678,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,
	1,0,0,0,682,182,1,0,0,0,683,681,1,0,0,0,684,687,3,187,93,0,685,687,5,95,
	0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,184,1,0,0,0,688,692,3,187,93,0,
	689,692,3,189,94,0,690,692,5,95,0,0,691,688,1,0,0,0,691,689,1,0,0,0,691,
	690,1,0,0,0,692,186,1,0,0,0,693,694,7,27,0,0,694,188,1,0,0,0,695,696,7,
	28,0,0,696,190,1,0,0,0,697,699,7,2,0,0,698,700,7,29,0,0,699,698,1,0,0,0,
	699,700,1,0,0,0,700,701,1,0,0,0,701,705,3,189,94,0,702,704,3,189,94,0,703,
	702,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,192,1,0,
	0,0,707,705,1,0,0,0,28,0,195,197,481,487,491,497,506,510,512,515,521,524,
	532,536,539,545,548,552,555,561,563,675,681,686,691,699,705,1,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MoocodeLexer.__ATN) {
			MoocodeLexer.__ATN = new ATNDeserializer().deserialize(MoocodeLexer._serializedATN);
		}

		return MoocodeLexer.__ATN;
	}


	static DecisionsToDFA = MoocodeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}